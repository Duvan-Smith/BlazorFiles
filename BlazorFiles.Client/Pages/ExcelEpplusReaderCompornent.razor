@page "/ExcelEpplus"

@using System.IO;
@using Blazor.FileReader
@using System;
@using System.Diagnostics;


@inject IFileReaderService fileReader
@inject HttpClient client


<h1>Upload file with EPPLUS Library !</h1>

<div class="row">
    <div class="col-4">
        <div class="form-group">
            <MatFileUpload OnChange="@FilesReadyForContent" Class="progress-bar" />
            <ul>
                <li>File Name: @fileName</li>
                <li>Size: @size</li>
                <li>Type: @type</li>
            </ul>
        </div>

        @if (!string.IsNullOrWhiteSpace(message))
        {

            <div class="alert alert-success">
                @message
            </div>
        }

        else
        {
            <div class="alert-danger">
                @error
            </div>
        }


        @if (size == 8187.ToString())
        {
            <div class="alert-danger">
                @archivoNulo
            </div>
            @*if (file.Size == null || file.Size == default)
            {
                <div class="alert-danger">
                    @error
                </div>
            }*@
        }


    </div>

    @*TODO:Lenny - aquí se agrega el componente de las páginas*@
    @*<div class="col-4">
            @if (imagePath != null)
            {
                <img alt="@imagePath" height="100" width="100" />
            }
        </div>*@
</div>

@functions
{
    ElementReference inputReference;
    string message = string.Empty;
    string error = string.Empty;
    string archivoNulo = "archivo nulo";
    string imagePath = null;


    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;
    string fileContent;
    IMatFileUploadEntry file;

    Stream fileStream = null;

    async Task FilesReadyForContent(IMatFileUploadEntry[] files)
    {
        try
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }


            using (var stream = new MemoryStream())
            {

                var sw = Stopwatch.StartNew();
                await file.WriteToStreamAsync(stream);
                sw.Stop();

                fileStream = new MemoryStream(stream.ToArray());


                fileName = file.Name;
                size = $"{file.Size}b";
                //size = file.Size.ToString();
                type = file.Type;

                content.Add(new StreamContent(fileStream, (int)fileStream.Length), "excel", fileName);

                string url = "https://localhost:44345";

                var response = await client.PostAsync($"{url}/api/ExcelEPPlusUsedRange", content);

                if (response.IsSuccessStatusCode)
                {

                    var uploadedFileName = await response.Content.ReadAsStringAsync();
                    //imagePath = $"{url}/{uploadedFileName}";
                    message = "File has been uploaded successfully!";
                }
                else
                {
                    message = string.Empty;
                    error = "Seleccione solo archivos con formato excel";
                }

                //if (file == null)
                //    error = "sin información";
            }
        }
        catch (Exception e)
        {
            fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}

@code{

    enum extensiones
    {

        xls,
        xlsx
    }
}
