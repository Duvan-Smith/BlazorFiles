@page "/ExcelEpplus"

@using System.IO;
@using Blazor.FileReader
@using System;
@using System.Diagnostics;

@inject IFileReaderService fileReader
@inject HttpClient  client

<h1>Upload file with EPPLUS Library !</h1>

<div class="row">
    <div class="col-4">
        <div class="form-group">
            <MatFileUpload OnChange="@FilesReadyForContent"></MatFileUpload>
            <ul>
                <li>File Name: @fileName</li>
                <li>Size: @size</li>
                <li>Type: @type</li>
            </ul>
        </div>
        @if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="alert alert-success">
                File has been uploaded
            </div>
        }
    </div>
    <div class="col-4">
        @if (imagePath != null)
        {
            <img alt="@imagePath" height="100" width="100" />
        }
    </div>
</div>

@functions
{
    ElementReference inputReference;
    string message = string.Empty;
    string imagePath = null;

    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;
    string fileContent;

    Stream fileStream = null;

    async Task FilesReadyForContent(IMatFileUploadEntry[] files)
    {
        try
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }

            using (var stream = new MemoryStream())
            {
                var sw = Stopwatch.StartNew();
                await file.WriteToStreamAsync(stream);
                sw.Stop();

                fileStream = new MemoryStream(stream.ToArray());

                fileName = file.Name;
                size = $"{file.Size}b";
                type = file.Type;

                if (stream.Length > 1024 * 1024)
                {
                    fileContent = "";
                    fileContent += $"Name:\t{file.Name}\r\n";
                    fileContent += $"Type:\t{file.Type}\r\n";
                    fileContent += $"LastModified:\t{file.LastModified}\r\n";
                    fileContent += $"Size:\t{file.Size}\r\n";
                    fileContent += $"Time:\t{sw.Elapsed}\r\n";
                    fileContent += $"Speed:\t{(stream.Length / sw.Elapsed.TotalSeconds):N0}  b/s\r\n";
                }
                else
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    using (var reader = new StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                    }
                }

                content.Add(new StreamContent(fileStream, (int)fileStream.Length), "excel", fileName);

                string url = "https://localhost:44345";

                var response = await client.PostAsync($"{url}/api/ExcelEPPlusUsedRange", content);

                if (response.IsSuccessStatusCode)
                {
                    var uploadedFileName = await response.Content.ReadAsStringAsync();
                    imagePath = $"{url}/{uploadedFileName}";
                    message = "File has been uploaded successfully!";
                }
            }
        }
        catch (Exception e)
        {
            fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}
